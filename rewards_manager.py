#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional
import os
import sys
from database import AntDatabase
from dotenv import load_dotenv
from aiogram import Bot
# Removed aiogram.client import for aiogram 2.x compatibility
import aiohttp
from discount_code_manager import DiscountCodeManager, DiscountType

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('rewards_manager.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# Configuraci√≥n de puntos por actividad
XP_POR_MENSAJE = 1
XP_POR_FOTO = 5
XP_POR_REACCION = 1
XP_POR_COMANDO = 0
XP_POR_COMANDO_INFO = 2
XP_POR_GAME_WIN = 10
XP_FOTO_APROBADA = 25

class RewardsManager:
    def __init__(self, db):
        self.db = db
        self.sistema_activo = True
        self.logger = logging.getLogger('rewards_manager')
        
        # Configurar logging
        if not self.logger.handlers:
            handler = logging.FileHandler('rewards_manager.log', encoding='utf-8')
            formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
            self.logger.setLevel(logging.INFO)
        
        # Configurar l√≠mites de experiencia
        self.LIMITE_DIARIO_XP = 100
        self.LIMITE_XP_BURST = 5
        self.XP_POR_MENSAJE = XP_POR_MENSAJE
        self.XP_POR_FOTO = XP_POR_FOTO
        self.XP_POR_REACCION = XP_POR_REACCION
        self.XP_POR_COMANDO = XP_POR_COMANDO
        self.XP_POR_COMANDO_INFO = XP_POR_COMANDO_INFO
        self.XP_POR_GAME_WIN = XP_POR_GAME_WIN
        self.XP_FOTO_APROBADA = XP_FOTO_APROBADA
        
        # Inicializar sistema de c√≥digos de descuento
        self.discount_manager = DiscountCodeManager(db)
        
        logger.info("Sistema de recompensas inicializado con gesti√≥n de c√≥digos de descuento")
        
        # Bot se configurar√° despu√©s con set_bot()
        self.bot = None
    
    def set_bot(self, bot):
        """Establece la referencia al bot para enviar mensajes"""
        self.bot = bot
    
    def detener_sistema(self):
        """Detiene el sistema de recompensas"""
        self.sistema_activo = False
        logger.info("Sistema de recompensas detenido")
    
    async def actualizar_experiencia(self, user_id, username, chat_id, interaction_type, command_name=None):
        """Actualiza la experiencia de un usuario basado en su interacci√≥n"""
        try:
            cursor = self.db.get_connection().cursor(dictionary=True)
            
            # Determinar XP a otorgar
            xp_ganado = 0
            if interaction_type == 'message':
                xp_ganado = self.XP_POR_MENSAJE
            elif interaction_type == 'photo' or interaction_type == 'video':
                xp_ganado = self.XP_POR_FOTO
            elif interaction_type == 'reaction':
                xp_ganado = self.XP_POR_REACCION
            elif interaction_type == 'command':
                if command_name in ['ayuda', 'hormidato', 'especie', 'normas']:
                    xp_ganado = self.XP_POR_COMANDO_INFO
                else:
                    xp_ganado = self.XP_POR_COMANDO
                
            if xp_ganado == 0:
                return
                
            # Verificar si el usuario existe
            cursor.execute("""
                SELECT * FROM user_experience 
                WHERE user_id = %s AND chat_id = %s
            """, (user_id, chat_id))
            user = cursor.fetchone()
            
            if user:
                # Actualizar experiencia existente
                nuevo_xp = user['total_xp'] + xp_ganado
                nuevo_nivel = self.calcular_nivel(nuevo_xp)
                nivel_anterior = user['current_level']
                
                # Verificar si subi√≥ de nivel
                if nuevo_nivel > nivel_anterior:
                    await self.notificar_subida_nivel(user_id, chat_id, nuevo_nivel)
                    await self.verificar_recompensas(user_id, chat_id, nuevo_nivel)
                    
                    # Otorgar badge autom√°tico si corresponde
                    badge_otorgado = await self.otorgar_badge_automatico(user_id, chat_id, nuevo_nivel, username)
                    if badge_otorgado:
                        logger.info(f"Badge autom√°tico otorgado al usuario {user_id} para nivel {nuevo_nivel}")
                    else:
                        logger.info(f"No se otorg√≥ badge autom√°tico para nivel {nuevo_nivel} al usuario {user_id}")
                
                cursor.execute("""
                    UPDATE user_experience 
                    SET total_xp = %s,
                        current_level = %s,
                        last_message_time = NOW(),
                        updated_at = NOW()
                    WHERE user_id = %s AND chat_id = %s
                """, (nuevo_xp, nuevo_nivel, user_id, chat_id))
                
            else:
                # Crear nuevo registro de experiencia
                nivel_inicial = self.calcular_nivel(xp_ganado)
                cursor.execute("""
                    INSERT INTO user_experience 
                    (user_id, username, total_xp, current_level, chat_id, last_message_time)
                    VALUES (%s, %s, %s, %s, %s, NOW())
                """, (user_id, username, xp_ganado, nivel_inicial, chat_id))
            
            self.db.get_connection().commit()
            
        except Exception as e:
            logger.error(f"Error al actualizar experiencia: {str(e)}")
            self.db.get_connection().rollback()
        finally:
            if cursor:
                cursor.close()
    
    def calcular_nivel(self, xp):
        """
        Calcula el nivel basado en XP con un sistema equilibrado y sostenible
        Debe ser id√©ntico a la funci√≥n en database.py para consistencia
        """
        if xp < 0:
            return 1
            
        nivel = 1
        xp_acumulado = 0
        
        # Calcular nivel iterando a trav√©s de los rangos
        while nivel <= 100:
            xp_necesario = self.calcular_xp_para_nivel(nivel + 1)
            
            if xp_acumulado + xp_necesario > xp:
                break
                
            xp_acumulado += xp_necesario
            nivel += 1
            
        return min(nivel, 100)  # M√°ximo nivel 100
    
    def calcular_xp_para_nivel(self, nivel):
        """
        Calcula el XP necesario para alcanzar un nivel espec√≠fico desde el anterior
        """
        if nivel <= 1:
            return 0
        elif nivel <= 10:
            # Progresi√≥n inicial: 75, 100, 125, 150, 175, 200, 225, 250, 275
            return 50 + (nivel - 1) * 25
        elif nivel <= 30:
            # Progresi√≥n moderada: incremento de 40 XP por nivel
            return 275 + (nivel - 10) * 40
        elif nivel <= 60:
            # Progresi√≥n estable: incremento de 75 XP por nivel
            return 1075 + (nivel - 30) * 75
        else:
            # Progresi√≥n alta: incremento de 125 XP por nivel
            return 3325 + (nivel - 60) * 125
    
    async def notificar_subida_nivel(self, user_id, chat_id, nuevo_nivel):
        """Notifica al usuario cuando sube de nivel con informaci√≥n detallada"""
        try:
            # Obtener informaci√≥n del usuario
            cursor = self.db.get_connection().cursor(dictionary=True)
            cursor.execute("""
                SELECT username, total_xp FROM user_experience 
                WHERE user_id = %s AND chat_id = %s
            """, (user_id, chat_id))
            user_data = cursor.fetchone()
            
            if not user_data:
                return
                
            username = user_data['username'] or f"Usuario {user_id}"
            xp_total = user_data['total_xp']
            
            # Determinar badge y emoji seg√∫n nivel
            if nuevo_nivel < 5:
                emoji = "üå±"
                badge = "Nurse"
            elif nuevo_nivel < 10:
                emoji = "üåø"
                badge = "Explorador Mirmec√≥logo"
            elif nuevo_nivel < 25:
                emoji = "üå≥"
                badge = "Guardi√°n de la Reina"
            elif nuevo_nivel < 50:
                emoji = "‚≠ê"
                badge = "Comandante Imperial"
            elif nuevo_nivel < 75:
                emoji = "üî•"
                badge = "Se√±or de las Castas"
            elif nuevo_nivel < 100:
                emoji = "üëë"
                badge = "Emperador Entom√≥logo"
            else:
                emoji = "üèÜ"
                badge = "Ser supremo"
            
            # Recompensas especiales por nivel con c√≥digo autom√°tico
            recompensas_especiales = {
                5: {
                    "titulo": "üå± Badge 'nurse'",
                    "descripcion": "Ahora eres una peque√±a hormiga",
                    "tipo": "acceso"
                },
                10: {
                    "titulo": "üåø Descuento 5% + Badge 'Explorador Mirmec√≥logo'",
                    "descripcion": "Descuento del 5% en la tienda y badge especial de administrador",
                    "tipo": "descuento"
                },
                15: {
                    "titulo": "üå≥ Kit de inicio Terra",
                    "descripcion": "Kit de iniciaci√≥n Terra para cuidado de hormigas",
                    "tipo": "kit"
                },
                25: {
                    "titulo": "‚≠ê Descuento 10% + Badge 'Guardi√°n de la Reina'",
                    "descripcion": "Descuento del 10% en la tienda y badge avanzado de administrador",
                    "tipo": "descuento"
                },
                35: {
                    "titulo": "üî• Kit M Terra",
                    "descripcion": "Kit M Terra con herramientas avanzadas",
                    "tipo": "kit"
                },
                50: {
                    "titulo": "üíé Badge 'Comandante Imperial' + Kit L Terra",
                    "descripcion": "Badge de √©lite de administrador y kit L Terra avanzado",
                    "tipo": "kit_premium"
                },
                75: {
                    "titulo": "üëë Badge 'Se√±or de las Castas' + Tarjeta Regalo 50‚Ç¨",
                    "descripcion": "Badge supremo de administrador y tarjeta regalo de 50‚Ç¨",
                    "tipo": "premio_grande"
                },
                100: {
                    "titulo": "üèÜ Badge 'Emperador Entom√≥logo' + Tarjeta Regalo 100‚Ç¨",
                    "descripcion": "Badge m√°ximo de administrador y tarjeta regalo de 100‚Ç¨",
                    "tipo": "premio_maximo"
                }
            }
            
            # Generar c√≥digo de descuento autom√°ticamente si corresponde
            codigo_descuento = None
            if nuevo_nivel in [10, 25, 50, 75, 100]:
                codigo_descuento = self.discount_manager.create_level_reward_code(
                    user_id=user_id, 
                    level=nuevo_nivel, 
                    username=username
                )
                if codigo_descuento:
                    logger.info(f"C√≥digo de descuento generado autom√°ticamente: {codigo_descuento} para nivel {nuevo_nivel}")
            
            # Calcular XP para pr√≥ximo nivel
            xp_proximo_nivel = self.db.calcular_xp_total_para_nivel(nuevo_nivel + 1)
            xp_faltante = xp_proximo_nivel - xp_total if nuevo_nivel < 100 else 0
            
            # Mensaje base de felicitaci√≥n
            mensaje = (
                f"üéâ ¬°LEVEL UP! üéâ\n\n"
                f"{emoji} **@{username}** ha alcanzado el **NIVEL {nuevo_nivel}**! {emoji}\n"
                f"üèÖ Badge: **{badge}**\n"
                f"‚ö° XP Total: **{xp_total:,}**\n"
            )
            
            # Verificar si este nivel otorga badge autom√°tico 
            badges_automaticos = {10: "üåø Explorador Mirmec√≥logo", 25: "‚≠ê Guardi√°n de la Reina", 50: "üíé Comandante Imperial", 75: "üëë Se√±or de las Castas", 100: "üèÜ Emperador Entom√≥logo"}
            if nuevo_nivel in badges_automaticos:
                mensaje += f"üëë **¬°BADGE AUTOM√ÅTICO OTORGADO!** üëë\n"
                mensaje += f"üéñÔ∏è T√≠tulo: **{badges_automaticos[nuevo_nivel]}**\n"
                mensaje += f"‚ú® Ahora eres administrador con permisos especiales\n"
            
            # A√±adir informaci√≥n del pr√≥ximo nivel si no es nivel m√°ximo
            if nuevo_nivel < 100:
                mensaje += f"üéØ Para Nivel {nuevo_nivel + 1}: **{xp_faltante:,} XP restantes**\n"
            else:
                mensaje += "üèÜ **¬°NIVEL M√ÅXIMO ALCANZADO!**\n"
            
            # Verificar si hay recompensa especial en este nivel
            if nuevo_nivel in recompensas_especiales:
                recompensa = recompensas_especiales[nuevo_nivel]
                mensaje += (
                    f"\nüéÅ **¬°RECOMPENSA ESPECIAL DESBLOQUEADA!** üéÅ\n"
                    f"üì¶ {recompensa['titulo']}\n"
                    f"üìù {recompensa['descripcion']}\n"
                )
                
                if codigo_descuento and recompensa['tipo'] in ['descuento', 'premio_grande', 'premio_maximo']:
                    mensaje += f"üîë C√≥digo: **{codigo_descuento}**\n"
                    
                mensaje += "\nüí¨ Para reclamar tu recompensa, contacta con un administrador."
            
            mensaje += "\n\nüåü ¬°Gracias por tu participaci√≥n en la comunidad Antmaster! üåü"
            
            # Enviar mensaje en el grupo
            from aiogram.enums import ParseMode
            await self.bot.send_message(
                chat_id=chat_id,
                text=mensaje,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # Enviar mensaje privado detallado si hay recompensa especial
            if nuevo_nivel in recompensas_especiales:
                try:
                    recompensa = recompensas_especiales[nuevo_nivel]
                    mensaje_privado = (
                        f"üéâ ¬°Felicitaciones por alcanzar el NIVEL {nuevo_nivel}! üéâ\n\n"
                        f"üéÅ **RECOMPENSA ESPECIAL DESBLOQUEADA**\n"
                        f"üì¶ {recompensa['titulo']}\n"
                        f"üìù {recompensa['descripcion']}\n\n"
                    )
                    
                    # A√±adir informaci√≥n del badge autom√°tico si corresponde
                    badges_automaticos = {10: "üåø Explorador Mirmec√≥logo", 25: "‚≠ê Guardi√°n de la Reina", 50: "üíé Comandante Imperial", 75: "üëë Se√±or de las Castas", 100: "üèÜ Emperador Entom√≥logo"}
                    if nuevo_nivel in badges_automaticos:
                        mensaje_privado += (
                            f"üëë **¬°BADGE AUTOM√ÅTICO OTORGADO!** üëë\n"
                            f"üéñÔ∏è **T√≠tulo:** {badges_automaticos[nuevo_nivel]}\n"
                            f"‚ú® **Privilegios especiales:**\n"
                            f"‚Ä¢ T√≠tulo personalizado visible en el grupo\n"
                            f"‚Ä¢ Permisos de administrador b√°sicos\n"
                            f"‚Ä¢ Reconocimiento especial de la comunidad\n\n"
                        )
                    
                    if codigo_descuento and recompensa['tipo'] in ['descuento', 'premio_grande', 'premio_maximo']:
                        mensaje_privado += (
                            f"üîë **Tu c√≥digo de descuento:** `{codigo_descuento}`\n\n"
                            f"üìã **Instrucciones:**\n"
                            f"1. Copia este c√≥digo (v√°lido por 6 meses)\n"
                            f"2. Contacta con un administrador en el grupo\n"
                            f"3. Presenta tu c√≥digo para reclamar la recompensa\n"
                            f"4. Usa /mis_codigos para ver todos tus c√≥digos\n\n"
                        )
                    elif recompensa['tipo'] in ['kit', 'kit_premium']:
                        mensaje_privado += (
                            f"üìã **Para reclamar tu kit:**\n"
                            f"1. Contacta con un administrador en el grupo\n"
                            f"2. Proporciona tu informaci√≥n de env√≠o\n"
                            f"3. El kit ser√° enviado a tu direcci√≥n\n\n"
                        )
                    else:  # acceso
                        mensaje_privado += (
                            f"‚úÖ **Tu recompensa se ha activado autom√°ticamente**\n"
                            f"Ya tienes acceso a todas las funciones desbloqueadas.\n\n"
                        )
                    
                    mensaje_privado += (
                        f"üèÖ Tu nuevo badge: **{badge}**\n"
                        f"‚ö° XP Total: **{xp_total:,}**\n\n"
                        f"üåü ¬°Gracias por ser parte de la comunidad Antmaster! üåü"
                    )
                    
                    await self.bot.send_message(
                        chat_id=user_id, 
                        text=mensaje_privado,
                        parse_mode=ParseMode.MARKDOWN
                    )
                    
                    # Registrar la recompensa en la base de datos
                    self.db.add_reward(user_id, recompensa['tipo'], recompensa['descripcion'])
                    
                except Exception as e:
                    logger.error(f"No se pudo enviar mensaje privado al usuario {user_id}: {str(e)}")
            
        except Exception as e:
            logger.error(f"Error al notificar subida de nivel: {str(e)}")
        finally:
            if 'cursor' in locals() and cursor:
                cursor.close()
    
    async def verificar_recompensas(self, user_id, chat_id, nivel):
        """Verifica y otorga recompensas por nivel"""
        try:
            cursor = self.db.get_connection().cursor(dictionary=True)
            
            # Obtener nombre de usuario
            cursor.execute("SELECT username FROM user_experience WHERE user_id = %s AND chat_id = %s", (user_id, chat_id))
            user_data = cursor.fetchone()
            
            if not user_data:
                return
                
            # Verificar si la recompensa ya ha sido otorgada
            cursor.execute("""
                SELECT * FROM user_rewards 
                WHERE user_id = %s AND level = %s
            """, (user_id, nivel))
            
            reward = cursor.fetchone()
            
            if not reward:
                # Lista de recompensas por nivel (solo niveles espec√≠ficos tienen recompensas)
                recompensas = {
                    5: "Acceso a comandos informativos",
                    10: "Descuento 5% en la tienda",
                    15: "Kit b√°sico de hormigas",
                    25: "Descuento 10% en la tienda",
                    35: "Kit intermedio de hormigas",
                    50: "Kit avanzado de hormigas",
                    75: "Tarjeta regalo 50‚Ç¨",
                    100: "Tarjeta regalo 100‚Ç¨"
                }
                
                if nivel in recompensas:
                    descripcion = recompensas[nivel]
                    
                    # Generar c√≥digo de descuento para niveles con descuentos monetarios usando el nuevo sistema
                    codigo = None
                    if nivel in [10, 25, 50, 75, 100]:
                        codigo = self.discount_manager.create_level_reward_code(user_id, nivel, user_data['username'])
                    
                    # Registrar recompensa en la base de datos
                    cursor.execute("""
                        INSERT INTO user_rewards 
                        (user_id, username, level, reward_name, claimed, chat_id)
                        VALUES (%s, %s, %s, %s, 0, %s)
                    """, (user_id, user_data['username'], nivel, descripcion, chat_id))
                    
                    self.db.get_connection().commit()
                    logger.info(f"Recompensa de nivel {nivel} otorgada al usuario {user_data['username']} (ID: {user_id})")
            
        except Exception as e:
            logger.error(f"Error al verificar recompensas: {str(e)}")
            self.db.get_connection().rollback()
        finally:
            if cursor:
                cursor.close()
    
    async def mostrar_ranking_semanal(self):
        """Muestra el ranking semanal en todos los grupos activos"""
        try:
            cursor = self.db.get_connection().cursor(dictionary=True)
            
            # Obtener lista de grupos activos
            cursor.execute("""
                SELECT DISTINCT chat_id FROM user_experience
                WHERE chat_id < 0  -- Solo grupos, no chats privados
            """)
            
            grupos = cursor.fetchall()
            
            for grupo in grupos:
                chat_id = grupo['chat_id']
                
                # Calcular fecha de hace una semana
                una_semana_atras = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d %H:%M:%S')
                
                # Obtener el ranking semanal
                cursor.execute("""
                    SELECT ui.user_id, ue.username, COUNT(*) as interacciones, SUM(ui.points) as puntos_semana, ue.current_level
                    FROM user_interactions ui
                    JOIN user_experience ue ON ui.user_id = ue.user_id AND ui.chat_id = ue.chat_id
                    WHERE ui.chat_id = %s AND ui.created_at > %s
                    GROUP BY ui.user_id
                    ORDER BY puntos_semana DESC
                    LIMIT 10
                """, (chat_id, una_semana_atras))
                
                ranking = cursor.fetchall()
                
                if ranking:
                    mensaje = "üèÜ RANKING SEMANAL üèÜ\n\nLos usuarios m√°s activos de la semana:\n\n"
                    
                    for i, user in enumerate(ranking):
                        medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else f"{i+1}."
                        mensaje += f"{medal} @{user['username']} - {user['puntos_semana']} XP (Nivel {user['current_level']})\n"
                    
                    mensaje += "\n¬°Felicidades a los m√°s activos! Sigue participando para subir en el ranking. üåü"
                    
                    # Enviar el mensaje al grupo
                    await self.bot.send_message(chat_id=chat_id, text=mensaje)
                    
                    logger.info(f"Ranking semanal enviado al grupo {chat_id}")
                
        except Exception as e:
            logger.error(f"Error al mostrar ranking semanal: {str(e)}")
        finally:
            if 'cursor' in locals() and cursor:
                cursor.close()
    
    async def mostrar_ranking_mensual(self):
        """Muestra el ranking mensual en todos los grupos activos"""
        try:
            cursor = self.db.get_connection().cursor(dictionary=True)
            
            # Obtener lista de grupos activos
            cursor.execute("""
                SELECT DISTINCT chat_id FROM user_experience
                WHERE chat_id < 0  -- Solo grupos, no chats privados
            """)
            
            grupos = cursor.fetchall()
            
            for grupo in grupos:
                chat_id = grupo['chat_id']
                
                # Calcular fecha de hace un mes
                un_mes_atras = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d %H:%M:%S')
                
                # Obtener el ranking mensual
                cursor.execute("""
                    SELECT ui.user_id, ue.username, COUNT(*) as interacciones, SUM(ui.points) as puntos_mes, ue.current_level
                    FROM user_interactions ui
                    JOIN user_experience ue ON ui.user_id = ue.user_id AND ui.chat_id = ue.chat_id
                    WHERE ui.chat_id = %s AND ui.created_at > %s
                    GROUP BY ui.user_id
                    ORDER BY puntos_mes DESC
                    LIMIT 10
                """, (chat_id, un_mes_atras))
                
                ranking = cursor.fetchall()
                
                if ranking:
                    mensaje = "üèÜ RANKING MENSUAL üèÜ\n\nLos usuarios m√°s activos del mes:\n\n"
                    
                    for i, user in enumerate(ranking):
                        medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else f"{i+1}."
                        mensaje += f"{medal} @{user['username']} - {user['puntos_mes']} XP (Nivel {user['current_level']})\n"
                    
                    mensaje += "\n¬°Felicidades a los m√°s activos del mes! El usuario #1 recibir√° una menci√≥n especial. üåü"
                    
                    # Enviar el mensaje al grupo
                    await self.bot.send_message(chat_id=chat_id, text=mensaje)
                    
                    logger.info(f"Ranking mensual enviado al grupo {chat_id}")
                    
                    # Premiar al usuario top 1 del mes
                    if ranking and len(ranking) > 0:
                        top_user = ranking[0]
                        await self.premiar_usuario_top(top_user['user_id'], top_user['username'], chat_id)
                
        except Exception as e:
            logger.error(f"Error al mostrar ranking mensual: {str(e)}")
        finally:
            if 'cursor' in locals() and cursor:
                cursor.close()
    
    async def premiar_usuario_top(self, user_id, username, chat_id):
        """Premia al usuario top del mes"""
        try:
            # Enviar mensaje especial en el grupo
            mensaje = (
                f"üåü ¬°FELICIDADES AL TOP 1 DEL MES! üåü\n\n"
                f"@{username} ha sido el usuario m√°s activo este mes.\n"
                f"Como reconocimiento, recibir√° un premio especial. ¬°Gracias por tu contribuci√≥n a la comunidad!"
            )
            
            await self.bot.send_message(chat_id=chat_id, text=mensaje)
            
            # Intentar enviar mensaje privado
            try:
                mensaje_privado = (
                    f"üéâ ¬°Felicidades! Has sido el usuario m√°s activo del mes en el grupo.\n\n"
                    f"Como reconocimiento, has ganado un premio especial.\n"
                    f"Un administrador se pondr√° en contacto contigo para entregarte tu recompensa.\n\n"
                    f"¬°Gracias por tu valiosa participaci√≥n en la comunidad Antmaster!"
                )
                await self.bot.send_message(chat_id=user_id, text=mensaje_privado)
            except Exception as e:
                logger.error(f"No se pudo enviar mensaje privado al usuario top {user_id}: {str(e)}")
                
            # Registrar el premio en la base de datos
            cursor = self.db.get_connection().cursor()
            cursor.execute("""
                INSERT INTO user_rewards 
                (user_id, username, level, reward_name, claimed, chat_id)
                VALUES (%s, %s, 0, 'Premio Top 1 mensual', 0, %s)
            """, (user_id, username, chat_id))
            
            self.db.get_connection().commit()
            logger.info(f"Premio Top 1 mensual registrado para el usuario {username} (ID: {user_id})")
            
        except Exception as e:
            logger.error(f"Error al premiar usuario top: {str(e)}")
            if 'cursor' in locals() and cursor:
                self.db.get_connection().rollback()
        finally:
            if 'cursor' in locals() and cursor:
                cursor.close()
    
    async def check_and_show_rankings(self):
        """Verifica si es momento de mostrar los rankings semanales y mensuales"""
        try:
            now = datetime.now()
            
            # Ranking semanal cada domingo a las 20:00
            if now.weekday() == 6 and now.hour == 20 and now.minute < 10:  # Domingo, entre 20:00 y 20:09
                await self.mostrar_ranking_semanal()
                logger.info("Ranking semanal generado y mostrado")
            
            # Ranking mensual el primer d√≠a del mes a las 12:00
            if now.day == 1 and now.hour == 12 and now.minute < 10:  # D√≠a 1, entre 12:00 y 12:09
                await self.mostrar_ranking_mensual()
                logger.info("Ranking mensual generado y mostrado")
            
        except Exception as e:
            logger.error(f"Error al verificar y mostrar rankings: {str(e)}")
    
    async def main(self):
        """Funci√≥n principal que se ejecuta continuamente para verificar rankings"""
        logger.info("Sistema de recompensas iniciado")
        
        while self.sistema_activo:
            try:
                # Verificar rankings
                await self.check_and_show_rankings()
                
                # Esperar 5 minutos antes de volver a verificar
                await asyncio.sleep(300)
                
            except Exception as e:
                logger.error(f"Error en el bucle principal del sistema de recompensas: {str(e)}")
                await asyncio.sleep(60)  # Esperar un minuto en caso de error
                
        logger.info("Sistema de recompensas detenido")

    async def otorgar_badge_automatico(self, user_id, chat_id, nivel, badge_name):
        """Otorga autom√°ticamente un badge promocionando al usuario a administrador con t√≠tulo personalizado"""
        try:
            # Solo otorgar badges en niveles espec√≠ficos
            badges_niveles = {
                5: "Peque√±a Nurse",
                10: "Explorador Mirmec√≥logo",
                25: "Guardi√°n de la Reina", 
                50: "Comandante Imperial",
                75: "Se√±or de las Castas",
                100: "Emperador Entom√≥logo"
            }
            
            if nivel not in badges_niveles:
                return False
                
            badge_titulo = badges_niveles[nivel]
            
            logger.info(f"Intentando otorgar badge '{badge_titulo}' al usuario {user_id} en chat {chat_id}")
            
            # Verificar que el bot tenga permisos para promocionar administradores
            try:
                bot_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=self.bot.id)
                if not hasattr(bot_member, 'can_promote_members') or not bot_member.can_promote_members:
                    logger.warning(f"El bot no tiene permisos para promocionar miembros en el chat {chat_id}")
                    return False
            except Exception as e:
                logger.error(f"Error verificando permisos del bot: {str(e)}")
                return False
            
            # Verificar el estado actual del usuario
            try:
                user_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
                
                # Si ya es administrador, solo actualizar el t√≠tulo
                if hasattr(user_member, 'status') and user_member.status in ['administrator', 'creator']:
                    if user_member.status == 'creator':
                        logger.info(f"Usuario {user_id} es el creador del grupo, no se puede cambiar t√≠tulo")
                        return False
                        
                    # Solo cambiar t√≠tulo si es diferente
                    current_title = getattr(user_member, 'custom_title', None)
                    if current_title != badge_titulo:
                        success = await self.bot.set_chat_administrator_custom_title(
                            chat_id=chat_id,
                            user_id=user_id,
                            custom_title=badge_titulo
                        )
                        
                        if success:
                            logger.info(f"T√≠tulo actualizado a '{badge_titulo}' para usuario {user_id}")
                            return True
                        else:
                            logger.error(f"Error al actualizar t√≠tulo para usuario {user_id}")
                            return False
                    else:
                        logger.info(f"Usuario {user_id} ya tiene el t√≠tulo '{badge_titulo}'")
                        return True
                        
                # Si no es administrador, promoverlo
                else:
                    # Permisos b√°sicos para el badge (sin permisos destructivos)
                    success = await self.bot.promote_chat_member(
                        chat_id=chat_id,
                        user_id=user_id,
                        is_anonymous=False,  # No an√≥nimo
                        can_manage_chat=False,  # No puede gestionar chat
                        can_delete_messages=False,  # No puede borrar mensajes
                        can_manage_video_chats=False,  # No puede gestionar videollamadas
                        can_restrict_members=False,  # No puede restringir miembros
                        can_promote_members=False,  # No puede promover otros
                        can_change_info=False,  # No puede cambiar info del grupo
                        can_invite_users=True,  # Puede invitar usuarios (b√°sico)
                        can_pin_messages=False,  # No puede anclar mensajes
                        can_manage_topics=False  # No puede gestionar topics
                    )
                    
                    if success:
                        logger.info(f"Usuario {user_id} promovido a administrador con permisos b√°sicos")
                        
                        # Establecer t√≠tulo personalizado
                        title_success = await self.bot.set_chat_administrator_custom_title(
                            chat_id=chat_id,
                            user_id=user_id,
                            custom_title=badge_titulo
                        )
                        
                        if title_success:
                            logger.info(f"Badge '{badge_titulo}' otorgado exitosamente al usuario {user_id}")
                            return True
                        else:
                            logger.error(f"Error al establecer t√≠tulo '{badge_titulo}' para usuario {user_id}")
                            return False
                    else:
                        logger.error(f"Error al promover usuario {user_id} a administrador")
                        return False
                        
            except Exception as e:
                logger.error(f"Error obteniendo informaci√≥n del usuario {user_id}: {str(e)}")
                return False
                
        except Exception as e:
            logger.error(f"Error general al otorgar badge autom√°tico: {str(e)}")
            return False

if __name__ == '__main__':
    asyncio.run(RewardsManager(AntDatabase(
        host=os.getenv('DB_HOST'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        database=os.getenv('DB_NAME')
    )).main()) 